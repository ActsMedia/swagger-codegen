package {{packageName}}.infrastructure
import io.objectbox.Box
import io.objectbox.kotlin.boxFor


{{#models}}{{#model}}{{#isDatabaseModel}}
import {{modelPackage}}.{{databaseModelName}}{{/isDatabaseModel}}
{{/model}}
{{/models}}

{{#models}}
{{#model}}
{{#isDatabaseModel}}

val {{databaseModelName}}.Companion.entityBox: Box<{{databaseModelName}}>
        get() {
            return BoxCore.boxStore.boxFor({{databaseModelName}}::class)
        }
{{#isProtocolUUIDType}}
fun {{databaseModelName}}.Companion.ItemForUUID(uuid: String): {{databaseModelName}}? {
    try {
        return entityBox.query().equal({{databaseModelName}}_.uuid, uuid).build().findUnique()
    }
    catch(e: io.objectbox.exception.DbException) {
        //This means the database is in a bad state. At some point we need to be able to recover from this
        e.printStackTrace()
        throw e
    }
}
{{/isProtocolUUIDType}}{{/isDatabaseModel}}
{{/model}}
{{/models}}
