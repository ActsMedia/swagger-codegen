
/**
 * {{{description}}}
{{#vars}}
 * @param {{nameInCamelCaseFirstLetterLower}} {{{description}}}
{{/vars}}
 */
@Parcelize
@Entity
class {{databaseModelName}} (
    {{#requiredVars}}{{#isListContainer}}{{#items}}{{#isString}}@Convert(converter = StringListConverter::class, dbType = String::class)
    {{/isString}}{{/items}}{{/isListContainer}}{{>data_class_req_var}}{{^-last}},
    {{/-last}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}},
    {{/hasOptional}}{{/hasRequired}}{{#optionalVars}}{{#isListContainer}}{{#items}}{{#isString}}@Convert(converter = StringListConverter::class, dbType = String::class)
    {{/isString}}{{/items}}{{/isListContainer}}{{>data_class_opt_var}}{{^-last}},
    {{/-last}}{{/optionalVars}}{{#vars}}{{#databaseToOneRelation}},
    var {{databaseRelationPropertyName}}Id: Long = 0{{/databaseToOneRelation}}{{/vars}},
    @Id var id: Long = 0): Serializable, Parcelable{{#isProtocolUUIDType}}, UUIDEntity(uuid){{/isProtocolUUIDType}}{{#isProtocolSoftDeletableType}}, SoftDeletable{{/isProtocolSoftDeletableType}} {
    
    {{#vars}}{{#databaseToManyRelation}}
    @IgnoredOnParcel
    @Backlink(to = "{{databaseRelationForeignPropertyName}}")
    lateinit var {{databaseRelationPropertyName}}: ToMany<{{databaseRelationModelType}}>
    {{/databaseToManyRelation}}{{#databaseManyToManyRelation}}
    @IgnoredOnParcel
    lateinit var {{databaseRelationPropertyName}}: ToMany<{{databaseRelationModelType}}>
    {{/databaseManyToManyRelation}}{{#databaseToOneRelation}}
    @IgnoredOnParcel
    lateinit var {{databaseRelationPropertyName}}: ToOne<{{databaseRelationModelType}}>
    {{/databaseToOneRelation}}{{/vars}}

    // This allows us to add static extensions to the class
    companion object
}
