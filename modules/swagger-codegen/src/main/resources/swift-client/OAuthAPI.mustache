//
//  AuthAPI.swift
//  Created by David Solberg on 12/18/15.
//  Changes by Paul Fechner Jr. 03/20/17
//  Generated by Swagger
//  Copyright Â© 2017 ActsMedia. All rights reserved.

import Foundation

class AuthAPI {
    
	static let urlTag = "/oauth/token"
    static private(set) var isRefreshingToken = false
    
    /// Creates and securely saves a token if one exists from the account. Check the result for success to determine whether a token was granted.
	static func authorizeAccount(genericAPIType: GenericAPI.Type = GenericAPI.self, networkType: Network.Type = Network.self, body: User, success: @escaping (Oauth_info?) -> (), failure: @escaping (Error) -> ()) -> Bool {
        guard isRefreshingToken == false, let password = body.password else {
            print("Should not happen!")
            return false
        }
        isRefreshingToken = true
		let body = networkType.authorizationBody(for: body.email, with: password)
        let successBlock: (Oauth_info?) -> () = {processSuccess(info: $0, success: success)};
        let failureBlock: (Error) -> () = {processFailure(error: $0, failure: failure)}
        
        genericAPIType.genericCall(requiresOauth: false, sendAsArray: false, headers: networkType.Header.json, url: networkType.url(for: urlTag, versioned: false), body: body, success: successBlock, failure: failureBlock)
		return true
    }

    /// Refreshes the existing token if there is one. If no token exists, returns false. Also check the completion block to see whether the refresh was successful.
    static func refreshToken(genericAPIType: GenericAPI.Type = GenericAPI.self, networkType: Network.Type = Network.self, success: @escaping (Oauth_info?) -> (), failure: @escaping (Error) -> ()) -> Bool {

        guard let refreshHeader = networkType.refreshBody() else {
			return false
		}
        guard !isRefreshingToken else {
            print("Should not happen!")
            return false
        }
        isRefreshingToken = true
		genericAPIType.genericCall(requiresOauth: false, sendAsArray: false, headers: networkType.Header.json, url: networkType.url(for: urlTag, versioned: false), body: refreshHeader, success: success, failure: failure)
		return true
    }

	static func processFailure(error: Error, failure: @escaping (Error) -> ()) {
		isRefreshingToken = false
		NotificationCenter.default.post(name: NotificationNameTokenRefresh, object: nil)
		failure(error)
	}

	static func processSuccess(info: Oauth_info?, success: @escaping (Oauth_info?) -> ()) {

		defer {
			_ = NotificationCenter.default.post(name: NotificationNameTokenRefresh, object: nil)
			success(info)
		}

		guard let accessToken = info?.access_token, let refreshToken = info?.refresh_token else {
			print("Auth completion failed")
			return
		}
		Token.header = accessToken
		Token.refresh = refreshToken
		isRefreshingToken = false
	}

	static func testingSetIsRefreshingToken(to newValue: Bool) {
		isRefreshingToken = newValue
	}
}
