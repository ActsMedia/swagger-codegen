// JSONTests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
import CoreData
import Quick
import Nimble
@testable import {{appName}}_Debug

let leftKey: String = "leftItem"
let rightKey: String = "rightItem"

class ModelTests: QuickSpec {

	//MARK: required environment variables

	let coderFile: String =  {
		let path = NSTemporaryDirectory() as NSString
		let locToSave = path.appendingPathComponent("teststasks")
		return locToSave
	}()

	let managedObjectContextForTests: NSManagedObjectContext =  {

		let managedObjectModel = NSManagedObjectModel.mergedModel(from: [Bundle.main])!
		let persistentStoreCoordinator = NSPersistentStoreCoordinator(managedObjectModel: managedObjectModel)

		do {
			try persistentStoreCoordinator.addPersistentStore(ofType: NSInMemoryStoreType, configurationName: nil, at: nil, options: nil)
		} catch {
			print("Adding in-memory persistent store failed")
		}

		let managedObjectContext = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)
		managedObjectContext.persistentStoreCoordinator = persistentStoreCoordinator
		return managedObjectContext
	}()

	//MARK: Tests

	override func spec() {
		describe("Models") {
			{{#models}}{{#model}}{{^isExcludedFromTests}}
			describe("{{classname}}") {
				testableModelSwaggerTests({{classname}}.self){{#isBuildCoreData}}
				testableModelCDTests({{classname}}.self){{/isBuildCoreData}}{{#isInitRequired}}    
				let requiredInit = {{classname}}({{#vars}}{{#required}}{{name}}: makeTestAttribute(){{#hasMore}}, {{/hasMore}}{{/required}}{{/vars}})
				it("initializes Correctly") {
					expect(requiredInit).toNot(beNil())
				}{{/isInitRequired}}
			}
			{{/isExcludedFromTests}}{{/model}} {{/models}}
		}
	}

	//MARK: Generic testing functions, mostly conecting to SharedExamples

	func itemsMatchJSON<T: JSONConvertable>(_ key: String, leftItem: T, rightItem: T) {
		itBehavesLike(key) { [leftKey : leftItem, rightKey : rightItem] }
	}

	func itemsMatchCoding<T: NSCoding>(_ key: String, leftItem: T, rightItem: T) {
		itBehavesLike(key) { [leftKey : leftItem, rightKey : rightItem] }
	}

	func itemsMatchCD<Swag: CoreDataBuildable, CD: CoreDataToSwaggerBuildable>(_ key: String, leftItem: Swag, rightItem: CD) {
		itBehavesLike(key) { [leftKey : leftItem, rightKey : rightItem, "CDContext" : self.managedObjectContextForTests] }
	}

	func JSONConvertableTests<T: JSONConvertable>(_ item: T, exampleKey: String) {
		describe("JSONConvertable") {
			it("Rejects Invalid input") {
				expect(T.decodeFromJSON(source: "")).to(beNil(), description: "Returned valid object when should have been nil")
				expect(T.decodeFromJSON(source: [String : Any]())).to(beNil(), description: "Returned valid object with empty dictionary")
				expect(T.decodeFromJSON(source: ["" : "Error"] as [String : Any])).to(beNil(), description: "Returned valid object with empty dictionary")
			}
			let itemJSON = item.encodeToJSON()
			it("To JSON") {
				expect(itemJSON).to(beAKindOf([String : Any].self))
			}
			let itemFromJSON = T.decodeFromJSON(source: itemJSON)
			it("From JSON") {
				expect(itemFromJSON).toNot(beNil(), description: "itemFromJSON")
			}
			if let itemFromJSON = itemFromJSON {
				itemsMatchJSON(exampleKey, leftItem: item, rightItem: itemFromJSON)
			}		
		}
	}

	func NSCodingTests<T: NSCoding>(_ item: T, exampleKey: String) {
		describe("NSCoding") {
			NSKeyedArchiver.archiveRootObject(item, toFile: self.coderFile)
			let itemFromCoder = NSKeyedUnarchiver.unarchiveObject(withFile: self.coderFile) as? T
			describe("Convert") {
				expect(itemFromCoder).toNot(beNil(), description: "itemFromCoder")
			}	
			if let itemFromCoder = itemFromCoder {
				itemsMatchCoding(exampleKey, leftItem: item, rightItem: itemFromCoder)
			}
		}
	}

	func CoreDataBuildableTests<T: CoreDataBuildable>(_ item: T, exampleKey: String) where T.T: CoreDataToSwaggerBuildable {
		describe("Swagger To CD") {
			let itemAsCD = item.createAndOrUpdateManagedObject(in: self.managedObjectContextForTests)
			describe("Convert") {
				expect(itemAsCD).toNot(beNil(), description: "item to CD")
			}
			if let itemAsCD = itemAsCD {
				itemsMatchCD(exampleKey, leftItem: item, rightItem: itemAsCD)	
			}
		}
	}

	func CoreDataToSwaggerTests<T: CoreDataBuildable>(_ item: T, exampleKey: String) where T.T: CoreDataToSwaggerBuildable {
		describe("CD To Swagger") {
			let cdItem = item.createAndOrUpdateManagedObject(in: self.managedObjectContextForTests)
			let itemConvertedBackAndForth: T? = cdItem?.asSwaggerModel() as? T
			describe("Converts") {
				expect(itemConvertedBackAndForth).toNot(beNil(), description: "item back and forth from CD")
			}
			if let itemConvertedBackAndForth = itemConvertedBackAndForth, let cdItem = cdItem {
				itemsMatchCD(exampleKey, leftItem: itemConvertedBackAndForth, rightItem: cdItem)
			}	
		}
	}

	func testableModelSwaggerTests<T: TestableModel>(_ type: T.Type) where T: JSONConvertable, T: NSCoding {
		let fullModel = T.makeTestModel(optionalItems: true, connectionAttributes: true)
		let typeString = type(of: fullModel)
		describe("Full") {
			let fullTypeString = "\(typeString)Full"
			JSONConvertableTests(fullModel, exampleKey: fullTypeString)
			NSCodingTests(fullModel, exampleKey: fullTypeString)
		}
		let optionalModel = T.makeTestModel(optionalItems: false, connectionAttributes: true)
		describe("Optional") {
			let optionalTypeString = "\(typeString)Optional"
			JSONConvertableTests(optionalModel, exampleKey: optionalTypeString)
			NSCodingTests(optionalModel, exampleKey: optionalTypeString)
		}
	}

	func testableModelCDTests<T: TestableModel>(_ type: T.Type) where T: CoreDataBuildable, T.T: CoreDataToSwaggerBuildable {
		let fullModel = T.makeTestModel(optionalItems: true, connectionAttributes: false)
		let typeString = type(of: fullModel)
		describe("Full") {
			let fullTypeString = "\(typeString)CDFull"
			CoreDataBuildableTests(fullModel, exampleKey: fullTypeString)
			CoreDataToSwaggerTests(fullModel, exampleKey: fullTypeString)

		}
		let optionalModel = T.makeTestModel(optionalItems: false, connectionAttributes: false)
		describe("Optional") {
			let optionalTypeString = "\(typeString)CDOptional"
			CoreDataBuildableTests(optionalModel, exampleKey: optionalTypeString)
			CoreDataToSwaggerTests(optionalModel, exampleKey: optionalTypeString)
		}
	}
}