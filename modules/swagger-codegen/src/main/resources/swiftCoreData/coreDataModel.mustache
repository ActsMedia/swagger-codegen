{{#models}}{{#model}}{{#isDatabaseModel}}
//Is database model
import Foundation
import CoreData


//
// -------------- {{databaseModelName}} --------------
//

@objc({{databaseModelName}})
class {{databaseModelName}}: NSManagedObject {

{{#vars}}{{^databaseIsRelation}}{{^isPrimitiveType}}    @NSManaged var {{nameInCamelCase}}: {{datatype}}{{^required}}?{{/required}}{{#required}}!{{/required}}
{{/isPrimitiveType}}{{#isPrimitiveType}}        var {{nameInCamelCase}}: {{datatype}}{{^required}}?{{/required}}{{#required}}!{{/required}} {
            // Getters and setters required to make it possible to have optional primitive types.
            get {
                willAccessValue(forKey: "{{nameInCamelCase}}")
                let value = primitiveValue(forKey: "{{nameInCamelCase}}") as? {{datatype}}
                didAccessValue(forKey: "{{nameInCamelCase}}")
                return value
            }
            set {
                willChangeValue(forKey: "{{nameInCamelCase}}")
                let value: {{datatype}}? = newValue ?? nil
                setPrimitiveValue(value, forKey: "{{nameInCamelCase}}")
                didChangeValue(forKey: "{{nameInCamelCase}}")
            }
        }
{{/isPrimitiveType}}{{/databaseIsRelation}}{{#databaseIsRelation}}{{#databaseRelationIsToManyReference}}        @NSManaged var {{databaseRelationPropertyName}}: Set<{{databaseRelationModelType}}>{{^required}}?{{/required}}{{#required}}!{{/required}}
{{/databaseRelationIsToManyReference}}
{{^databaseRelationIsToManyReference}}
        @NSManaged var {{databaseRelationPropertyName}}: {{databaseRelationModelType}}{{^required}}?{{/required}}{{#required}}!{{/required}}
{{/databaseRelationIsToManyReference}}{{/databaseIsRelation}}{{/vars}}
}{{/isDatabaseModel}}{{/model}}{{/models}}
