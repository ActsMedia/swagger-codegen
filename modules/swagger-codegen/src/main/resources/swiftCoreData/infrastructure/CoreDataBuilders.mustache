// CoreDataBuilders.swift
// API Version {{appVersion}}
//

import Foundation
import CoreData

protocol CoreDataBuildable {
    associatedtype T: NSManagedObject
    func createAndOrUpdateManagedObject(in context: NSManagedObjectContext) -> T?
}

extension CoreDataBuildable {
    
    /// Convenience function to speed up build time
    ///
    /// - Parameter item: item to be unwrapped
    /// - Returns: false if item is nil, otherwise item's unwrapped value
    fileprivate func boolOrFalseForNil(_ item: Bool?) -> Bool {
        guard let item = item else {
            return false
        }
        return item
    }
}

{{#models}}{{#model}}{{#isDatabaseModel}}{{#isProtocolUUIDType}}extension {{classname}}: CoreDataBuildable {

    func createAndOrUpdateManagedObject(in context: NSManagedObjectContext) -> {{databaseModelName}}? {

        guard let cd{{classname}} = {{databaseModelName}}.getOrCreate(for: uuid, in: context, with: boolOrFalseForNil(deleted_on_server)) else {
            return nil;
        }
{{#vars}}{{^databaseIsRelation}}        
        cd{{classname}}.{{name}} = {{name}}{{/databaseIsRelation}}{{#databaseIsRelation}}{{#databaseRelationCreateLinkMethods}}{{#databaseRelationIsToManyReference}}
        
        cd{{classname}}.{{databaseRelationPropertyName}} = {{databaseRelationModelType}}.classedObjects(for: {{name}}, in: context) 
        if cd{{classname}}.{{databaseRelationPropertyName}}?.count != {{name}}?.count {
			print("Data integrity failure in {{classname}}. Missing connections for {{name}}: \(String(describing: {{name}}))")
		}{{/databaseRelationIsToManyReference}}{{^databaseRelationIsToManyReference}}

        if let uuid = {{name}}, let object: {{databaseRelationModelType}} = {{databaseRelationModelType}}.classedObject(for: uuid, in: context)  {
            cd{{classname}}.{{databaseRelationPropertyName}} = object
        } else {
            print("******\nData integrity failure in {{classname}}. The uuid \(String(describing: uuid)) for {{name}}  could not be found.\n***********")
        }{{/databaseRelationIsToManyReference}}{{/databaseRelationCreateLinkMethods}}{{/databaseIsRelation}}{{/vars}}
        return cd{{classname}}
    }
}

{{/isProtocolUUIDType}}{{/isDatabaseModel}}{{/model}}{{/models}}