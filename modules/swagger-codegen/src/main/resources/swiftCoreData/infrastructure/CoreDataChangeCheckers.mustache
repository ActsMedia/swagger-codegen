// CoreDataChangeCheckers.swift
// API Version {{appVersion}}

//

import Foundation
import CoreData

protocol CoreDataChangeCheckable {
    func matchingCoreDataHasChanged(context: NSManagedObjectContext) -> Bool
}

{{#models}}{{#model}}{{#isBuildCoreData}}{{#isProtocolUUIDType}}extension {{classname}}: CoreDataChangeCheckable {
    func matchingCoreDataHasChanged(context: NSManagedObjectContext) -> Bool
    {
        guard let cd{{classname}} = {{databaseModelName}}.objectForUuid(uuid, context: context) as? {{databaseModelName}} else { 
            return true
        }

{{#vars}}{{^databaseIsRelation}}        guard cd{{classname}}.{{name}} == {{name}} else { return true}
{{/databaseIsRelation}}
{{#databaseIsRelation}}{{#databaseRelationIsToManyReference}}
        if let uuids = {{name}} {
            if cd{{classname}}.{{databaseRelationPropertyName}}.count != uuids.count { return true }
            for object in cd{{classname}}.{{databaseRelationPropertyName}} {
                if !uuids.contains(object.uuid) {
                    return false
                }
            }
        } else if cd{{classname}}.{{databaseRelationPropertyName}}.count != 0 {
            return true
        }
{{/databaseRelationIsToManyReference}}
{{^databaseRelationIsToManyReference}}
        if let uuid = {{name}} {
            if cd{{classname}}.{{databaseRelationPropertyName}}.uuid != uuid {
                return true
            }
        } else if cd{{classname}}.{{databaseRelationPropertyName}} != nil {
            return true
        }
{{/databaseRelationIsToManyReference}}{{/databaseIsRelation}}{{/vars}}
        return false
    }
}

{{/isProtocolUUIDType}}{{/isBuildCoreData}}{{/model}}{{/models}}